# -*- coding: utf-8 -*-
"""iris_Naddanai

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14UlacKfbYuV2VJ6sUqgM9onyktEe0Yiz
"""

from sklearn.datasets import load_iris
iris = load_iris()

x = iris.data
y = iris.target

import pandas as pd
df = pd.DataFrame(x, columns = iris.feature_names)

df['target'] = y
print(df.head())
print()
print(df.describe())

import matplotlib.pyplot as plt
import seaborn as sns

sns.pairplot(df, hue="target")
plt.show()

from sklearn.neural_network import MLPClassifier
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state= 21)

scaler = StandardScaler()
x_train_scaled = scaler.fit_transform(x_train)
x_test_scaled = scaler.transform(x_test)

clf = MLPClassifier(hidden_layer_sizes=(5, 3), activation='relu', solver='adam', max_iter= 3000, random_state= 42)
clf.fit(x_train_scaled, y_train)

y_pred = clf.predict(x_test_scaled)

print(y_pred)

from sklearn.metrics import confusion_matrix, accuracy_score, classification_report

print(confusion_matrix(y_test, y_pred))
print()
print(accuracy_score(y_test, y_pred))
print()
print(classification_report(y_test, y_pred))

plt.figure(figsize=(6,4))
sns.heatmap(confusion_matrix(y_test, y_pred), annot=True, cmap='Blues', fmt='g')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

from sklearn.model_selection import cross_val_score
scores = cross_val_score(clf, scaler.transform(x), y, cv=5)

print("Cross-validation scores:", scores)
print("Mean CV score:", scores.mean())

from sklearn.model_selection import GridSearchCV
from sklearn.neural_network import MLPClassifier

param_grid = {
    'hidden_layer_sizes': [(5, 5), (10, 3), (10, 5), (15, 3)],
    'activation': ['relu', 'logistic', 'tanh'],
    'solver': ['adam', 'sgd'],
    'learning_rate_init': [0.0005, 0.001, 0.01, 0.1],
    'max_iter': [1000, 2000, 3000]
}

clf = MLPClassifier(random_state=42)

grid_search = GridSearchCV(clf, param_grid, cv=5, n_jobs=-1, verbose=2)
grid_search.fit(scaler.transform(x), y)

print("Best Parameters:", grid_search.best_params_)
print("Best Cross-Validation Score:", grid_search.best_score_)

"""Use best Parameters from GridSearchCV"""

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state= 21)

scaler = StandardScaler()
x_train_scaled = scaler.fit_transform(x_train)
x_test_scaled = scaler.transform(x_test)

clf = MLPClassifier(hidden_layer_sizes=(5, 5), activation='relu', solver='adam', max_iter= 2000, random_state= 42, learning_rate_init=0.0005)
clf.fit(x_train_scaled, y_train)

y_pred = clf.predict(x_test_scaled)

print(y_pred)

print(confusion_matrix(y_test, y_pred))
print()
print(accuracy_score(y_test, y_pred))
print()
print(classification_report(y_test, y_pred))

from sklearn.model_selection import cross_val_score
scores = cross_val_score(clf, scaler.transform(x), y, cv=5)

print("Cross-validation scores:", scores)
print("Mean CV score:", scores.mean())